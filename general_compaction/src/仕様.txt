数値のバイト数をしっかり測ってキワキワまで小さくすることでデータを圧縮する。

タグ部データ部と続く。データ部は1バイト区切り、タグ部は1bitずつ読む
1 続く1bitで0か1を表す
011 nullを表す
0101 続く1bitでboolを表す。型なし言語でbitと区別したい場合に使える。
01001 8バイト浮動小数を表す
0100011 undefined0を表す
01000101 undefined1を表す
0100010..1 undefined Nを表す
0100001 4バイト浮動小数を表す。型あり言語なら4byte整数にtruncateでもいいし、型なし言語でfloatが使われてるのを知らないから、なくてもよさそうなものだが、まああってもよいだろう。しかし7bitなので整数よりコンパクトなのが・・・
001 データ部1バイトで+127 to -128 を表す
0001 続く4bitでバイト数を表し、そのバイト数分データ部に文字列を形成。0-15バイトまでの文字列を表す。
00001 続く3bitでバイト数を表し、1-8バイトの整数を表す。0-7を+1してバイト数を表す。
000001 データ部1バイトでバイト数を表し、その後のデータ部で実際の文字列を形成。255バイトまでの文字列を表す。
0000001 10進数を表す。続く4bitでバイト数を表し、1-16バイトの整数を表す。続く1バイトで小数点の位置を表現。255桁の少数が理論上可能であるが、16バイト整数は40桁ぐらいである。1ならば小数点1桁、2ならば2桁・・・と点が左にずれていく。
00000001 続く3bitでバイト数を表し、データ部の続くそのバイトが表す数値の長さの文字列を表す。3bitは+1する。8バイトの表す約2000京バイト分の文字列が表せる

0,1を2bitで表せるので、任意桁数の数値とかも2進数に分解して倍のbit数をかければ表せるはずである。

タグ部のはじまり
最初の1バイトは次の数値のバイト数を表す。続くバイトでタグ部のタグ数を表す。タグが全部終わったら、次のバイトからはデータ部である。