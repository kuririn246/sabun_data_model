まず初期値をjsonで記述する。俺はjson5を使う。そして初期ファイルからスキーマを取り出す。
共通のスキーマを持つ２つのデータからは差分を取得することが出来る。

schemaが変わっていても、単にメンバが追加されただけならデータの整合性の破綻はしないはずだ。
元schemaがバックアップされているなら、それを読み出して、現在のschemaとの対応関係を調べ、2番目のメンバ→3番目のメンバといった変換表を作り、
それに沿って読み出してしまえば、ユーザに意識させることなくメンバの追加は可能である。
メンバ名を変更するだけなら、対応表を書いておけば対応できる。
メンバを削除した場合データを反映させなくするだけなら自動でできるが、それで大丈夫なのか定かでない。
そのあたりは怪しいが、メンバの追加、デフォルト値、メンバ名の変更は自動で対応したい。
メンバの削除もまあ警告かなんか出したほうがいいかもしれないが、とりあえず出来るようにしよう。

値の定義の変更、それに伴う値の更新などは、やろうとすると非常に難しい。自動でできるようにするべきなのかわからない。
とりあえず、スキーマ変換時に定義がない場合の初期値と、通常の初期値を別で設定できるようにして、プログラム側では定義がない場合に新しく計算して値を入れる、という処理を書いてもらうのが良いのではないかと思う。


フォルダ構成はこのような感じ

RootFolder+
-Initial+
--initial.json //初期値のjson
--2019-11(Nov)-30-11h25m22s1536-hash128alphabets.json //差分生成に使用した初期jsonファイルはコピーして、タイムスタンプとハッシュ値も記録しておく。

//名前変更、値の変換などは変換表を手動で用意することで自動でやってくれるようにもしたいが、実用的に使うのはまあ難しい気がする。
//いちいち値の定義を変えたりしながら開発しつつ元データを使いまわそうとするなんて混乱の元だろう。変換に使う式を何の言語で書くのかというのも問題になる。
//多分JavaScriptになるがそのためにJavaScriptインタプリタに依存する価値があるだろうか。
//そのへんはよくわからないが、「名前の変更」に関しては変換表を使って対応できるようにしたい。

-1A //1Aフォルダ。１つ目のA差分なので1A
--1A-30-Nov-2019-8:36:31:8615-hash128alphabets.asabun //A差分。
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//1/10000のタイムスタンプと128bitハッシュで一意性を保証
                                                      //タイムスタンプは64bit整数で間に合う桁数ならなんでもいいが可読性も大事だろうから小数点以下4桁まででいいのでは
--1B //B差分フォルダ
---1B-30-Nov-2019-8:41:31:8615-hash128alphabets.bsabun // B差分
---1C //C差分のフォルダ
----1C-2019-Nov-30-8:53:31:8615.csabun //差分ファイル。C差分は次々ファイルにappendされていく。ハッシュ値は変わっていくのでつかない
----timestamps.txt //各差分のタイムスタンプとハッシュ値と何バイト目から始まるかが記録される。このファイルもappendされていく

ファイルは最新のものから差分を作られる場合ばかりではなく、昔のものを読み出す事もできる（それが差分生成してヒストリー全記録しておくメリットだ)
そしてそこから差分を新たに作ることもある。
多くの場合C差分ファイル内に埋もれたC差分を新たに新C差分として作り直すことになるだろう。
読みだしたのが1Cだった場合、2Cが新たに出来ることになるが、もともと2Cがすでに合った場合は2Cの2つめができることになる。
2つの2Cを区別するため、2C-2を作る。2C-2があった場合は2C-3、それもあったら2C-4・・・となる

初期値を記したjsonファイルはこんな感じ。
デフォルト値が変わるたびにjsonを書き換えると、ハッシュが一致しなくなり、必要もないのにスキーマ間の変換のための対応表を作る必要が発生するが、
そのくらい別にかまわないだろう。スキーマ間の変換は基本機能であり、特殊処理ではない。
ただ、一度でも差分生成に使用された初期jsonはバックアップがないと、jsonを書き換えられた時に差分ファイルが復元できないので、「単にjsonファイルをコピーしてバックアップする」必要があると思う。

{
  hogeNumber : 10,
  hogeString : "hoge",
  hogeBool : true,
  hogeObj : {
    hugaNumber : "30",

    //名前が?で終わるメンバはnull値を含むことが出来る。
    //プログラム側のメンバ名にはこの?は反映されず、型が変わるだけと想定される
    //JavaScriptで使う場合はメンバ名に?が入ると使いにくくなるだろうけれど・・・直接JSで初期値を読むユースケースがあるだろうか・・・？
    "hegoNumber?" : null,

    //配列はnumber配列、string配列、bool配列、それぞれ中身がnullableであるかの6通りとなる。最初に型を示し、その後初期値をいれる。
    numArray : [ "num-array", 0, 3, 10 ],
    nullableNumArray : [ "num?-array", 0, null, 10 ], //nullableの場合num?のようになる
    emptyNumArray : [ "num-array" ], //初期値が空配列のnum-array

    "numArray?" : [ "num-array?" ] //初期値がnullの場合、array?とする
    "numArray2?" : [ "num?-array?" ] //num?-array?もある。nullable整数配列であり初期値はnullである
	}

	hogeList : [
		"list", //listは配列とは違う。オブジェクトのコレクションを作るためにはlistを使う必要がある。
		["list-ID", "hogehoge"], //任意でlist-IDを与えることが出来る。list-IDは全データの中で一意である必要がある。
		{
			ID : "schema-dummy", //listの中身であるアイテムは全て同じ型になっている必要がある。
			                     //そしてアイテムのデフォルト値を指定し、さらにリスト内で一意なIDも付加する。
			                     //IDがないと差分を生成する時に何がどう変わったのか不明になってしまい効率が悪い。
			                     //listのデフォルトアイテムは通常最初のものが使用されるが、初期値を空listにしたい場合や、
			                     //最初をデフォルトにしたくない場合も考えられるので、その場合IDをschema-dummyとしてデフォルトアイテムを記述する。
			                     //また、ここをschema-autoとすることで、IDは自動で連番が振られるようになる。
			                     //
			                     //listには新規アイテムが追加されたりするが、その場合はこのデフォルトアイテムとの差分を記録することになる。
			hogeNumber : 11,
			hogeString : "hoge"
		},
		{
			ID : "first",
			hogeNumber : 12,
			hogeString : "huga"
		},
		{
			ID : "second",
			//デフォルト値から変更がない場合は書かなくても良いんじゃないかと思う
		}
	],

	changeNames : { prevName : "currentName",
	                prevName2 : "currentName2"... }, //メンバ名の変更をした場合、これを書いておくことで自動でメンバ名の対応表を作ってくれる。

	"member?" : 3,
	ifUndefined : {
    member : null,  //スキーマ変換時にmemberが元のスキーマに定義されていなかった場合、初期値をnullにする。
	                  //プログラム側ではnullを発見したら、特定の計算式を使ってmemberに初期値を入れることになるだろう。
	  member2 : null, //多分この機能はnullを入れる以外に使わないと思う・・・
	}
}
changeNamesとifUndefinedは予約語。

差分生成システムとは直接関係しないが、俺の考えるデータモデルでは、データの継承ができる。
{
	refID : "first",
	hogeNumber : 21 //オーバーライド
}

listIDとIDをrefとして指定することで、そのアイテムを参照し、さらに自分のところでオーバーライドできる。オーバーライドしても元データは変化しない。
Ref-list-IDはいちいち指定しなくても、このアイテムの親リストにRef-list-IDが一つだけあればそれを使う

itemList : [
	"list",
	["listID", "itemList"], //これは参照可能にするべきではないのでlistIDをつけるのは間違いだな・・・参照可能にするとアイテムを削除できない縛りを設けるつもりだ
	["refListID", "usables"], //このリスト内のアイテムはrefする時にこのlistから探す
	{
		ID : "1",
		refID : "yakusou",
		hogeString : "huga",
		mishikibetsu : true,
		unknown_name : "緑の草",
	}
]

つまりあるリストのアイテムを継承するアイテムのリストというものが自然に作られる設計になっている。
たとえば風来のシレンのアイテムリストがある時に、それぞれのアイテムはそれがどういうものであるのか（薬草とかどうたぬきとか）を継承し、
さらに+1したり、名前が未識別だったりといった付加情報も追加する必要がある。そういうのを自然に表現できる。
この継承システムをプログラム側に組み込みたいと思っているが、差分生成システムと全然関係がないので勝手に組み込んでいいものでもなさそうだ。
でも組み込むつもりだが。

また、refを使えば、不定型を実装できる。list内のitemが一つのlistからrefするなら同じ型にできるが、
薬草とどうたぬきのデータ型が同じとは思えない。どちらもrefしたいのでそうなるのが自然かなという気がする。
Rustでいえばenumにしてパターンマッチすることになるので、どれが来る可能性があるのか予め列挙しておくべきだろう。

["refListID", "weapons", "usables" ], //このリスト内のオブジェクトはrefする時にこれらのリストのうちどれかを使う

{
	refListID : "weapons",
	refID : "doutanuki"
}

単一継承では済まない場合も考え、多重継承も可能にしておくべきだろう
["multipleRefListIDs",
  {
    impl1 : //どのリスト群を使うのかを指定するための名前
    ["weapons", "usables"], //このやり方だと武器でありかつ使用可能であるものを記述できないので不適切と思われる。 nullableな weapon と usableを別個で作るべきか
    hoge : ["hoge"],
    "hego?" : ["hego"] //nullableにも出来る
  },
]

{
  refIDs : {
    impl1 : ["weapons", "doutanuki"],//リストとIDを指定する。
    hoge : ["hogeItem"], //一つしかlistがない場合は１つ目を省略できる
    //hoge : "hogeItem", //角カッコをなくしてしまってもいい
    hego : null //nullableの場合nullにしても良い。nullableの場合はnullと明示しなくてもデフォルトでnullになる。
  }
}

プログラム側からはこのようにアクセスする予定

obj.refIDs.hego　//ここからlist id と IDを取得可能
obj.hego == null //nullかどうかチェック可能
obj.hego.member
obj.member <-継承してるのでmemberを直接呼んでも良い

if let Some((list_name, id)) = obj.refIDs["hego"]
match obj.impl1{
  Impl1::Weapons{ a, b } => ...,
  Impl1::Usables{ c, d } => ...,
}

let m = obj.hego.member;
let n = obj.member;

リストの変化はこのようにデータ化される。

A  <-  A
C      B
D      C
E      D

この差分がどのようになるかといえば、

0番から1個移す
2番から2個移す
新規追加 E

追加、削除、順番の変化はこのように「NからM個を移す」と「新規追加」で記述する。移されなかったものは勝手に削除されることになる。
シンプルだが、同じ並びのものが残っていればそのまま使えるのでまあまあ良い差分の記述方法だろうと思う。
そして最初のオブジェクトから順番に差分データを書いていく。 n個変化なし 変化の記述 変化の記述 n個変化無し・・・といった感じで
変化がないのが続いていればまとめて飛ばせる。

元データの変化でリストの中身が変わった場合、差分記述はどのように適用されるべきか。
非常に難しい問題だと思う。Xを削除したのが、果たしてXだけ削除したかったのか、Xのようなものをすべて削除したかったのか。
元データに新しく追加されたYはXと同じように削除されるべきではなかったか

元リストのAとBの間にA'というアイテムが追加されたが、現在のリストではAとBの位置がひっくり返っている。A'はどこの位置にあるべきか。

そのようなよくわからない問題がいろいろ発生してしまうが、「元リストにないものが追加されていた場合そのまま末尾にくっつける」「他は現在のリストそのまま」でいいんじゃないかと思う。
同IDのアイテムについては、通常のオブジェクトの差分と同じように、変化がない部分はデフォルト値を使い、メンバ名が変化していれば対応表を使い、普通に差分をとる。

ref先が削除された場合、不正なデータが発生する。新規追加されたアイテムのref先が現在のデータでは消えてしまっていた場合、不正なデータになる。
そもそも不正なデータは、参照可能なリストから削除が可能である場合、発生する。これをどう扱うべきかよく分かっていない。
プログラム側で、list-IDがついていることを確認して、そのリストから削除しようとしたときにErrorで失敗するようにすれば、基本的には解決するはずだ。
削除できないとデータが膨れ上がって困るんじゃないの、という問題は残るものの・・・
元データからは削除されてても、差分の方には残ってしまっているアイテム、これもかなり怪しい扱いになってしまう・・・まあいいや。