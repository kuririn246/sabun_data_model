最悪ケースでどのくらい時間がかかるのかが問題。つまりA差分の作り直しに至った時にどのくらい時間がかかってしまうのか。
なんであっても、初期値読み出し、A差分、B差分、C差分と読み出して、現在値と比較し、基本的にC差分ファイルの末尾にappendすることになる。
C差分ファイルの限界容量に収まるかはあらかじめ予測ができるので、
収まらないと予想される時はC差分からの差分を取る必要はないと思う。これでC差分で繰り返し差分を適用する時間を浮かせる事ができる。
この時B差分からC差分ファイルを新たに作るか、A差分からB差分ファイルを新たに作るかの選択になる。
C差分ファイルを作ってみて、それが十分に大きい場合はB差分ファイルを作り直す、という手順にすると、最悪パターンであるA差分まで生成するときの作業量が増える。
いきなりB差分ファイルを作ることにすると、B差分が作られた時は、前のB差分と比較して、A差分を作り直すかを判定する作業が出てくるので、
そのややこしい作業をより頻繁に行わなければならず、大変かもしれない。
比較して判定する作業をなくしてしまえばもっと楽かもしれないが、それをやらないとB差分が大きくなり、ディスク容量や毎回必要な読み出しで不利になってしまうだろう。
まあ究極的なところ、作ってみて実際に時間を測り、問題があるようなら変えればいいし、そもそも差分生成戦略もユーザーが選べるようにする予定なので
今悩むことにそんなに意味はないだろう。

シミュレーションしてみたところ、どれだけC差分に中身を詰め込むかでデータ量の圧縮効率が決まってくるようだ。
C差分の大きさをA+B+Cb としたところ、頻繁にA差分をアップデートする戦略が結果的にC差分を大きくし、総データ量を減らすことに貢献してくれる。
C差分を固定値にした場合、最小になる方程式を適用するのが一番良い結果になった。そりゃそうだろう。
B差分を抜かしてA差分だけをアップデートしまくる戦略にしたところ、A差分が大きすぎ、それはそれでデータ量が大きくなった。
適度にアップデートするのが良い。まあ方程式戦略で大きくは間違わないようだ。
B差分をA差分の2/3までに抑える戦略のほうが微妙に成績がいいのが気になるが・・・そのへんはよく分からん。