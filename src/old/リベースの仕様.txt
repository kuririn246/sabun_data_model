あるファイルサイズまでは一つのファイルにappendしていくべきだと思う。最低4KB、1クラスタのサイズまでは増やさないと無駄が多すぎる。
仮にそれを16MBとしよう。16MBぐらいなら、何段階の差分であっても、よほどパワーのない端末でも問題ない処理時間で読み込めるんじゃないかと思う。
差分が何段階であるか、というのも読み込みにどれほどの処理時間がかかるかの指標として重要であるが、結局のところディスク読み込みに律速されると思う。
ファイルサイズ16MBまでは、ひたすら前回からの差分を蓄積していく。これをC差分としよう。
データ量が大きく、一度でファイルサイズが16MBを超える場合に、この方式は意味をなさなくなる。
その場合は、「2倍までは一度に問題なく読み込める」と仮定する。
基本的に、"A差分","B差分","C差分"の最大3ファイルを読み、元データに3つの差分を適用してデータを構成する予定である。
A差分、B差分のうち最大のファイルサイズのものの2倍までは、C差分用のファイルが大きくなっても良い、と考える。
といっても、基本的にB差分がA差分より大きいということはよほどのことがないと起こらないとは思うが・・・。
A差分とB差分とC差分が全然全く異なっていて、つまり毎回全体が書き換えられており共通部分がないような、差分生成システムと相性の悪いデータの場合、
C用のファイルには2回分入るかはいらないかといった感じになるだろう。
もともと差分を生成している意味がないので二回分も入らなくていいような気もするが、まあ2回ならいいだろう、という意味で、2倍まで差分を溜め込むことにする。
つまり、最大差分ファイルの2倍か、規定容量のうち大きい方を予定量として設定する。

C差分の量が規定のサイズを超えた場合、B差分を作り直すか、B差分からC差分を作るかの択が生まれる。
B差分から作られた最初のC差分をCb差分、その後の差分はCp差分とする。
適当に計算したところ、Cb差分がB差分の2/3以下なら作り直さないほうがいいんじゃないかという結論に至った。別ファイルに計算の過程を書いておいた。

B差分を作り直す時、A差分も作り直すかの択が生まれる。これも計算して結論を述べると、
4A - 2(B' + B) < n(B' - B)
ならばリベースするのが良いと考えた。

ここでいうB'は現在B差分を作ったときの大きさであり、
Bは共通部分を削った予想サイズである。
新しくB差分を仮にAから作り、それと前回のB差分を比較し、共通部分はリベースによって節約できると仮定する。

B が A なみに大きければ、左辺が負になるのでリベース、
左辺はほぼ定数であるが、B'が増えるほど条件はゆるくなる
右辺は B' - B は正になるので n が増えれば単調増加する
よってnが増えるとそのうち逆転する。
